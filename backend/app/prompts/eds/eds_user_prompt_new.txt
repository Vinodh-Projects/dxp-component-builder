---
Your task is to generate a JSON structure for a new **AEM Edge Delivery Services block**. This includes JavaScript and CSS files, a markdown table (preferred two column) representation, and sample input HTML based on the provided requirements.
Additionally, a **sample reference block** and **sample assistant output** are provided for guidance. Your output must closely follow the format and structure of the sample.

### Requirements

1. Extract Block Name:
   - Extract the block name and style from the user's input to use as the base for generating block JavaScript and CSS files.

2. Folder/File Structures:
   - Generate the following files based on the extracted block name:
     - `block_name.js`
     - `block_name.css`
   - Ensure the generated JavaScript and CSS files are complete and functional.
   - Use the referenced block code to generate the new block code.

3. Functionality of Edge Delivery Services Block:
   - Ensure the generated block is fully functional as per the input requirements or block name/type.

4. CSS Styling:
   - Use the `block_name.css` file to define styles for the block.
   - Add fixed height and width for proper display.
   - Avoid adding styles in the JavaScript file.

5. JavaScript Functionality:
   - The JavaScript file must contain a `decorate` function that takes the block input (an HTML element) and enhances it based on the block type.
   - Use the `decorate` method to:
     - Add necessary classes or IDs for styling or functionality.
     - Implement the required block-specific behavior.
   - Avoid adding styles directly in the JavaScript file.

6. Global and Framework Support:
   - Use the following additional resources as needed:
     - `global.js`: Contains custom global JavaScript code and triggers block loading.
     - `global.css`: Hosts global styling for the site, including layout details required for LCP.
     - **AEM Framework JavaScript**: Leverage built-in AEM Framework methods wherever applicable.

7. Reference Material:
   - A sample relevant block is provided as a reference for structure and implementation.
   - A sample assistant output is also provided. Your output should closely align with the format, structure, and level of detail in the sample.

### Output Format

- Strictly generate valid JSON only.
- The JSON output must contain:
  1. A markdown table representation of the block structure.
  2. A complete and functional `block_name.js` file.
  3. A complete and functional `block_name.css` file.
  4. The input HTML structure.
- Do not provide placeholders or incomplete snippets.
- If unable to generate the required output, respond with: `"I can't help with that"`.

### Additional Notes

1. HTML Structure:
   - Only `<div>` elements should be used to represent the block structure.
   - Do not add any classes, IDs, or other attributes to internal `<div>` elements.
   - Classes and IDs may only be added using the `decorate` method in the JavaScript file.

2. CSS Guidelines:
   - Use `global.css` for global layout and styling information when appropriate.
   - Do not include comments like `/* add your styles here */`.

3. JavaScript Guidelines:
   - Use `global.js` for shared JavaScript functionality where needed.
   - Use AEM Framework JavaScript methods for efficient and consistent implementation.

4. Content:
   - Focus on text-based content for the block. Avoid using images or other media.

5. Edge Delivery Compliance:
   - Ensure the block adheres to Edge Delivery Services' standards for functionality and styling.

### Project Context

Here are the project level styles, AEM JS functions and global JS functions:

**Project Level Styles**
{projectStyles}

**AEM JS Functions**
{aemJs}

**Global JS Functions**
{globalJs}

**Relevant Block Code**
{functionalBlockCode}

---